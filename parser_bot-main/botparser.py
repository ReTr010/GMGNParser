import sqlite3
import asyncio
import re
from KUR_playwright import parse_component
from aiogram import types
from aiogram.fsm.context import FSMContext
from concurrent.futures import ThreadPoolExecutor
from aiogram import Bot, Dispatcher
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router, F
import random
import time

MAX_ATTEMPTS = 8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
BLOCK_TIME = 60  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

API_TOKEN = ''

ADMIN_USERNAMES = []  # –ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

MAX_WINNERS = 1

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
conn = sqlite3.connect('bot_users.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
cursor.execute('''
             CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id TEXT UNIQUE,
                username TEXT,
                referral_code TEXT UNIQUE,
                invites_count INTEGER DEFAULT 0,
                inviter TEXT,
                particip INTEGER DEFAULT 0,
                language TEXT  -- –°—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
    );
''')

cursor.execute('''
    UPDATE users
    SET username = NULL
    WHERE username = 'unknown';
''')
conn.commit()


def update_user_language(telegram_id, new_language):
    with sqlite3.connect('bot_users.db') as db_conn:
        db_cursor = db_conn.cursor()
        db_cursor.execute("UPDATE users SET language = ? WHERE telegram_id = ?", (new_language, telegram_id))
        db_conn.commit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(telegram_id, username, language):
    cursor.execute("INSERT OR IGNORE INTO users (telegram_id, username, language) VALUES (?, ?, ?)",
                   (telegram_id, username, language))
    conn.commit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_all_users():
    cursor.execute("SELECT telegram_id, language FROM users")
    return cursor.fetchall()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ username
def is_admin(username):
    return username in ADMIN_USERNAMES


###########################################PIZDA BEDA
def execute_query(query, parameters=()):
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        cursor.execute(query, parameters)
        conn.commit()
        return cursor


def get_user_language(user_id):
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()

    cursor.execute("SELECT language FROM users WHERE telegram_id = ?", (user_id,))
    result = cursor.fetchone()

    conn.close()

    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        return 'rus'

class CaptchaState(StatesGroup):
    waiting_for_captcha = State()

# FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
class LanguageState(StatesGroup):
    choosing_language = State()


class TokenInfoState(StatesGroup):
    waiting_for_contract_address = State()
    waiting_for_broadcast_ru = State()
    waiting_for_broadcast_en = State()


# FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
class BroadcastState(StatesGroup):
    waiting_for_broadcast_ru = State()
    waiting_for_broadcast_en = State()

@router.message(Command('start'))
async def start(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else 'unknown'

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    referral_link = f'ref_{telegram_id}'

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    does_exist = bool(execute_query("SELECT telegram_id FROM users WHERE telegram_id = ?", (telegram_id,)).fetchone())

    if not does_exist:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É–∫–∞–∑–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        args = message.text.split()
        if len(args) > 1:
            ref_code = args[1]
            inviter = execute_query("SELECT telegram_id FROM users WHERE referral_code = ?", (ref_code,)).fetchone()

            if inviter:
                inviter_id = inviter[0]
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                execute_query("INSERT INTO users (telegram_id, username, referral_code, inviter) VALUES (?, ?, ?, ?)",
                              (telegram_id, username, referral_link, inviter_id))

                # –û–±–Ω–æ–≤–ª—è–µ–º invites_count —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                execute_query("UPDATE users SET invites_count = invites_count + 1 WHERE telegram_id = ?", (inviter_id,))
                invites_count = execute_query(
                    "SELECT invites_count FROM users WHERE telegram_id = ?", (inviter_id,)).fetchone()[0]
                if invites_count > 0:
                    execute_query("UPDATE users SET particip = 1 WHERE telegram_id = ?", (inviter_id,))
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                execute_query("INSERT INTO users (telegram_id, username, referral_code, inviter) VALUES (?, ?, ?, ?)",
                              (telegram_id, username, referral_link, None))
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            execute_query("INSERT INTO users (telegram_id, username, referral_code, inviter) VALUES (?, ?, ?, ?)",
                          (telegram_id, username, referral_link, None))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –∫–∞–ø—á–∏
    num1 = random.randint(1, 10)
    num2 = random.randint(1, 10)
    answer = num1 + num2

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫–∞–ø—á–∏ –≤ FSM
    await state.update_data(captcha_answer=answer, attempts=0)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f"Captcha: {num1} + {num2}?")
    await state.set_state(CaptchaState.waiting_for_captcha)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞–ø—á–∏
@router.message(CaptchaState.waiting_for_captcha)
async def handle_captcha(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    correct_answer = user_data.get("captcha_answer")
    attempts = user_data.get("attempts", 0)
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0

    if message.text.isdigit() and int(message.text) == correct_answer:
        # –ï—Å–ª–∏ –∫–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
        await state.update_data(attempts=0)  # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ / Select your mailing language:", reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¨üáß English")]
            ], resize_keyboard=True, one_time_keyboard=True
        ))
        await state.set_state(LanguageState.choosing_language)
    else:
        # –ï—Å–ª–∏ –∫–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
        attempts += 1
        if attempts >= 2:
            # –ï—Å–ª–∏ 3 –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
            num1 = random.randint(1, 20)
            num2 = random.randint(1, 20)
            new_answer = num1 + num2
            await state.update_data(captcha_answer=new_answer, attempts=0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø—á—É
            await message.answer(f"Try again: {num1} + {num2}?")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            await state.update_data(attempts=attempts)
            await message.answer(f"Wrong! Try again.")

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
@router.message(LanguageState.choosing_language)
async def choose_language(message: types.Message, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        language = "ru"
        await message.answer("–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π üá∑üá∫", reply_markup=types.ReplyKeyboardRemove())
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –º–µ–º–∫–æ–∏–Ω–∞ BOF, —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–ª—è –±–æ—Ä—å–±—ã –∑–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ–º–∏—Ä–µ. –ú—ã –ø—Ä–∏–¥—É–º–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Å—Ç–Ω–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, –ø–æ–º–æ–≥–∞—è –≤–∞–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã.\n\n"
            "üîó –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –ø—Ä–æ–µ–∫—Ç–µ BOF:\n\n"
            " ‚Ä¢ –ù–∞—à —Å–∞–π—Ç\nhttps://balls-of-fate.com\n"
            " ‚Ä¢ Telegram\nhttps://t.me/+DSPSmcwxe0IyZWEy\n"
            " ‚Ä¢ Twitter\nhttps://x.com/bofcommunyti?s=21\n\n"
            "–í–º–µ—Å—Ç–µ –º—ã —Å—Ç–æ–∏–º –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏! üöÄ\n\n"
            "üîé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞:"
        )
    elif message.text == "üá¨üáß English":
        language = "en"
        await message.answer("Language set to English üá¨üáß", reply_markup=types.ReplyKeyboardRemove())
        await message.answer(
            "Welcome to the smart contract verification bot, a special development from the BOF memcoin project created to fight for justice in the crypto world. We came up with this bot to make the world of cryptocurrencies more honest and safer by helping you identify potentially dangerous and fraudulent projects.\n\n"
            "üîó Learn more about the BOF project:\n\n"
            " ‚Ä¢ Our website\nhttps://balls-of-fate.tilda.ws/\n"
            " ‚Ä¢ Telegram\nhttps://t.me/+DSPSmcwxe0IyZWEy\n"
            " ‚Ä¢ Twitter\nhttps://x.com/bofcommunyti?s=21\n\n"
            "Together we stand on the side of honesty and transparency! üöÄ\n\n"
            "üîé Please select the platform to search for the token:"
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please select your language")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    telegram_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else 'unknown'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    does_exist = bool(execute_query("SELECT telegram_id FROM users WHERE telegram_id = ?", (telegram_id,)).fetchone())
    if not does_exist:
        execute_query(
            "INSERT INTO users (telegram_id, username, language) VALUES (?, ?, ?)",
            (telegram_id, username, language)
        )
    else:
        execute_query("UPDATE users SET language = ? WHERE telegram_id = ?", (language, telegram_id))

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"User {username} ({telegram_id}) selected language: {language}")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", reply_markup=get_platform_menu())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
def get_platform_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚öôÔ∏èsol"), KeyboardButton(text="üî∫tron")],
            [KeyboardButton(text="üìäbase"), KeyboardButton(text="üíéeth")],
            [KeyboardButton(text="üöÄblast")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

@router.message(F.text == "üíéeth")
async def eth_command(message: types.Message, state: FSMContext):
    await message.answer("Enter the contract address on the Ethereum platform:",
                         reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(platform="ethereum")
    await state.set_state(TokenInfoState.waiting_for_contract_address)


@router.message(F.text == "üöÄblast")
async def blast_command(message: types.Message, state: FSMContext):
    await message.answer("Enter the contract address on the Blast platform:", reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(platform="blast")
    await state.set_state(TokenInfoState.waiting_for_contract_address)


@router.message(F.text == "‚öôÔ∏èsol")
async def sol_command(message: types.Message, state: FSMContext):
    await message.answer("Enter the contract address on the Solana platform:", reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(platform="solana")
    await state.set_state(TokenInfoState.waiting_for_contract_address)


@router.message(F.text == "üìäbase")
async def base_command(message: types.Message, state: FSMContext):
    await message.answer("Enter the contract address on the Base platform:", reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(platform="base")
    await state.set_state(TokenInfoState.waiting_for_contract_address)


@router.message(F.text == "üî∫tron")
async def tron_command(message: types.Message, state: FSMContext):
    await message.answer("Enter the contract address on the Tron platform:", reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(platform="tron")
    await state.set_state(TokenInfoState.waiting_for_contract_address)


# –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –∏ —Å–µ–º–∞—Ñ–æ—Ä —Å –ª–∏–º–∏—Ç–æ–º –≤ N –ø–æ—Ç–æ–∫–æ–≤
executor = ThreadPoolExecutor()
semaphore = asyncio.Semaphore(40)


@router.message(TokenInfoState.waiting_for_contract_address)
async def fetch_coin_info(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    gathering_message = await message.answer("Please wait...")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    platform = data.get("platform")
    contract_address = message.text.strip()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    async with semaphore:
        # –ó–∞–ø—É—Å–∫ parse_elements –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        info = await parse_component(platform, contract_address)
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
    platform_shortcuts = {
        "solana": "SOL",
        "ethereum": "ETH",
        "base": "BASE",
        "tron": "TRON",
        "blast": "BLAST"
    }

    def process_data(input_data, mode):
        # –¢–µ–ª–æ process_data –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if mode == 'volume':
            return input_data.replace("\n/\n", " | ")
        elif mode == 'clean_text':
            return re.sub(r'[A-Za-z]', '', input_data).strip()
        elif mode == 'clean_brackets':
            return input_data.replace("(", "").replace(")", "")
        elif mode == 'remove_trailing_bracket':
            return input_data.rstrip("()")
        elif mode == 'platform':
            return platform_shortcuts.get(input_data.lower(), input_data)
        elif mode == 'numeric':
            return re.sub(r'[^0-9$K.]', '', input_data).strip()
        elif mode == 'remove_fire':
            return input_data.replace("üî•", "").strip()
        elif mode == 'short_address':
            return input_data.split('/')[-1]
        elif mode == 'rug_probability':
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏ % (–Ω–∞–ø—Ä–∏–º–µ—Ä, "55.3%")
            return re.search(r'\d+(\.\d+)?%', input_data).group() if re.search(r'\d+(\.\d+)?%',
                                                                               input_data) else input_data
        else:
            return input_data

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    volume_24h = process_data(info[15], 'volume')
    buy_24h = process_data(info[16], 'volume')
    hold_24h = process_data(info[17], 'volume')
    net_24h = process_data(info[18], 'volume')
    dev_burnt = process_data(info[1], 'clean_text')
    lp_ratio = process_data(info[10], 'clean_brackets')
    owner = process_data(info[27], 'short_address')
    short_platform = process_data(platform, 'platform')
    rug_probability = process_data(info[4], 'rug_probability')
    bof = process_data('$BOF', 'clean_brackets')

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º process_data –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è üî• –≤ Additional Info
    info_20 = process_data(info[20], 'remove_fire')
    info_22 = process_data(info[22], 'remove_fire')
    info_24 = process_data(info[24], 'remove_fire')
    info_26 = process_data(info[26], 'remove_fire')
    info_6 = process_data(info[6], 'remove_fire')

    solscan = f"<a href=\"https://solscan.io/token/{contract_address}#metadata\">\U0001F40D Solscan \n</a>"
    tronscan = f"<a href=\"https://tronscan.org/#/token20/{contract_address}#code\">\U0001F53A Tronscan \n</a>"
    etherscan = f"<a href=\"https://etherscan.io/token/{contract_address}#code\">\U0001F48E Etherscan \n</a>"

    if info[7] != '':
        response = (
            f'\U0001FA99 <code>{info[7]}</code> \n\n\n'
            f'{solscan if platform == "solana" else ""}'
            f'{etherscan if platform == "ethereum" else ""}'
            f'{tronscan if platform == "tron" else ""}'

            f'\U0001F517 <b>{short_platform}:</b> <code>{contract_address}</code>\n'

            f'\U0001F464 <b>Owner:</b> <code>{owner}</code>\n\n'
            f'\U0001F4B9 <b>LP Ratio:</b> {lp_ratio}\n'
            f'\U0001F4C8 <b>Holders:</b> {info[11]}\n'
            f'\U0001F4B0 <b>Market Cap:</b> {info[12]}\n'
            f'\U0001F4A7 <b>Liquidity Supply:</b> {info_6}\n'
            f'\U0001F30D <b>Volume (24h):</b>\n'
            f'      \U0001F4C9 <b>Total:</b> {volume_24h}\n'
            f'      \U0001F6D2 <b>Buys:</b> {buy_24h}\n'
            f'      \U0001F9F2 <b>Hold:</b> {hold_24h}\n'
            f'      \U0001F9FE <b>Net:</b> {net_24h}\n\n'

            f'\U0001F512 <b>LP Lock:</b> {info[14]} of Total Supply\n'
            f'\U0001F6E0 <b>Run/Hold/Add Liquidity:</b> {info[0]}\n'
            f'\U0001F525 <b>Dev Burnt:</b> {dev_burnt}\n'
            f'\U0001F51D <b>Top 10:</b> {info[2]}\n'
            f'\U0001F91D <b>Community Takeover:</b> {info[9]}\n'
            f'\U0001F465 <b>Insiders:</b> {info[3]}\n'
            f'\U0001F6A8 <b>Rug Probability:</b> {rug_probability}\n'

            f'\U00002139 <b>Additional Info:</b>\n'
            f'      \U0001F4CC {info[19]}: {info_20}\n'
            f'      \U0001F4CC {info[21]}: {info_22}\n'
            f'      \U0001F4CC {info[23]}: {info_24}\n'
            f'      \U0001F4CC {info[25]}: {info_26}\n\n'

            f'\U0001F310 <b>Socials:</b> '
            f'<a href="{info[28]}">X</a> | <a href="{info[29]}">Telegram</a> | <a href="{info[30]}">Website</a>\n\n\n'

            f'\u26A1 Produced by {bof} \n'
            f'<a href="https://t.me/+BXyihKj_ECk2Njky">\U0001F4AD BOF Telegram</a> | <a href="https://balls-of-fate.com/">\U0001F5A5 BOF Site</a>\n'
            f' <a href="https://dexscreener.com/solana/2jz7fuuy1nyjgas755janh8dmbeuarhumaueurhb7cgw">\U0001F4C8 BOF DEXCREENER</a> | <a href="https://jup.ag/swap/SOL-4yCuUMPFvaqxK71CK6SZc3wmtC2PDpDN9mcBzUkepump">\u26A1 BOF Site</a>\n\n'
            f'<code>CA: 4yCuUMPFvaqxK71CK6SZc3wmtC2PDpDN9mcBzUkepump</code>'
        )
    else:
        response = (
            'Please check your contract address/platform or try a little bit later \U0001F97A\U0001F97A\U0001F97A')
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    await gathering_message.delete()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–Ω–µ—Ç–µ
    await message.answer(response, parse_mode="HTML", disable_web_page_preview=True)
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    await message.answer("Select a platform to search for a token:", reply_markup=get_platform_menu())

@router.message(Command('myref'))
async def myref_command(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    telegram_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else 'unknown'
    referral_link = f'ref_{telegram_id}'

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ (—Å—É–º–º–∞ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    total_system_invites = execute_query("""
       SELECT SUM(invites_count) as total 
       FROM users
       WHERE invites_count > 0
   """).fetchone()[0] or 0

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_invites = execute_query("""
       SELECT COALESCE(invites_count, 0) as invites 
       FROM users 
       WHERE telegram_id = ?
   """, (telegram_id,)).fetchone()[0] or 0

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —à–∞–Ω—Å–∞ –Ω–∞ –ø–æ–±–µ–¥—É (–¥–µ–ª–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    # –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0, —Ç–æ —à–∞–Ω—Å —Ç–æ–∂–µ 0
    winning_chance = (user_invites / total_system_invites * 100) if total_system_invites > 0 else 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    does_exist = bool(execute_query("""
       SELECT telegram_id 
       FROM users 
       WHERE telegram_id = ?
   """, (telegram_id,)).fetchone())

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
    if not does_exist:
        try:
            execute_query("""
               INSERT INTO users (telegram_id, username, referral_code, inviter) 
               VALUES (?, ?, ?, ?)
           """, (telegram_id, username, referral_link, None))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    invite_link = f'https://t.me/BOF_Scanner_bot?start={referral_link}'
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    language = get_user_language(telegram_id)

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    response_text_rus = (
        'üéâ <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n'
        f'üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_invites}\n'
        f'üåç –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_system_invites}\n'
        f'üéØ –í–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É: {winning_chance:.2f}%\n\n'
        '‚ùóÔ∏è –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
        f'<a href="{invite_link}">{invite_link}</a>\n\n'
        'üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à!\n'
        'üèÜ –ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π - —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –ø–æ–±–µ–¥–∏—Ç—å!'
    )

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
    response_text_eng = (
        'üéâ <b>Your Referral Program</b>\n\n'
        f'üë• Users invited: {user_invites}\n'
        f'üåç Total system invites: {total_system_invites}\n'
        f'üéØ Your winning chance: {winning_chance:.2f}%\n\n'
        '‚ùóÔ∏è Your unique link:\n'
        f'<a href="{invite_link}">{invite_link}</a>\n\n'
        'üí° Invite friends to increase your chances of winning!\n'
        'üèÜ More invites - higher chance to win!'
    )

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–∏—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    participate_button = InlineKeyboardButton(
        text="üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" if language != 'en' else "üéâ Participate",
        callback_data="participate"
    )
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π
    markup = InlineKeyboardMarkup(inline_keyboard=[[participate_button]])

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    response_text = response_text_eng if language == 'en' else response_text_rus
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML –∏ –∫–Ω–æ–ø–∫–æ–π
    await message.answer(response_text, parse_mode='HTML', reply_markup=markup)


@router.callback_query(F.data == "participate")
async def participate_callback(call: types.CallbackQuery):
    telegram_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ `users`
    user = execute_query("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,)).fetchone()
    if not user:
        await call.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                          show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
    if user[5] == 1:  # –ü–æ–ª–µ `particip` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ 1
        await call.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!", show_alert=True)
        return

    inviter_id = user[4]  # –ü–æ–ª–µ `inviter`
    if inviter_id:
        execute_query("UPDATE users SET invites_count = invites_count + 1 WHERE telegram_id = ?", (inviter_id,))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω—É–ª—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º `particip`
        invites_count = \
            execute_query("SELECT invites_count FROM users WHERE telegram_id = ?", (inviter_id,)).fetchone()[0]
        if invites_count > 0:
            execute_query("UPDATE users SET particip = 1 WHERE telegram_id = ?", (telegram_id,))

    await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!", parse_mode='HTML')


@router.message(Command('set_winners'))
async def set_winners(message: types.Message):
    if not is_admin(message.from_user.username):
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /set_winners 5)
        new_winners_count = int(message.text.split()[1])
        global MAX_WINNERS
        MAX_WINNERS = new_winners_count  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {MAX_WINNERS}.")
    except (IndexError, ValueError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π. –ü—Ä–∏–º–µ—Ä: /set_winners 3")


@router.message(Command('delete_user'))
async def delete_user(message: types.Message):
    if not is_admin(message.from_user.username):
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    try:
        telegram_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram_id. –ü—Ä–∏–º–µ—Ä: /delete_user 123456789')
        return

    user = execute_query("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,)).fetchone()
    if not user:
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    else:
        inviter_of_user = user[5]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ 'inviter'
        if inviter_of_user:
            try:
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ, –Ω–µ –¥–æ–ø—É—Å–∫–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                execute_query("""
                    UPDATE users 
                    SET invites_count = 
                        CASE 
                            WHEN invites_count > 0 THEN invites_count - 1 
                            ELSE 0 
                        END 
                    WHERE telegram_id = ?
                """, (inviter_of_user,))

                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                execute_query("DELETE FROM users WHERE telegram_id = ?", (telegram_id,))

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–µ `particip`, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 1
                execute_query("UPDATE users SET particip = 0 WHERE invites_count < 1 AND telegram_id = ?",
                              (inviter_of_user,))

                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –±—ã–ª —É–¥–∞–ª–µ–Ω.')
            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            try:
                execute_query("DELETE FROM users WHERE telegram_id = ?", (telegram_id,))
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –±—ã–ª —É–¥–∞–ª–µ–Ω.')
            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@router.message(Command('draw'))
async def draw_raffle(message: types.Message):
    if not is_admin(message.from_user.username):
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    users = execute_query("SELECT telegram_id, username, invites_count FROM users WHERE invites_count > 0").fetchall()

    if len(users) < MAX_WINNERS:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.')
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º invites_count –∫–∞–∫ –≤–µ—Å–∞
    winners = set()
    while len(winners) < MAX_WINNERS:
        selected = random.choices(users, weights=[user[2] for user in users], k=1)[0]
        winners.add(selected)  # `set` –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    response = []
    for index, winner in enumerate(winners, start=1):
        response.append(f"{'ü•á' if index == 1 else 'ü•à' if index == 2 else 'ü•â' if index == 3 else 'üéñ'} {index} –º–µ—Å—Ç–æ\n"
                        f"üë§ ID: {winner[0]}\n"
                        f"üîπ Username: {winner[1]}\n"
                        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {winner[2]}\n")

    result_message = '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n' + '\n'.join(response)
    await message.answer(result_message)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
    devs = [815422218, 469372487]
    for dev in devs:
        try:
            await bot.send_message(dev, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n' + result_message)
        except Exception as e:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {dev}: {e}')


@router.message(Command('reset_users'))
async def reset_users_command(message: types.Message):
    if not is_admin(message.from_user.username):
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    execute_query("DELETE FROM users")
    await message.answer('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.')


@router.message(Command('participants'))
async def show_participants(message: types.Message):
    if not is_admin(message.from_user.username):
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    # –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
    users = execute_query(
        "SELECT telegram_id, username, invites_count FROM users ORDER BY invites_count DESC"
    ).fetchall()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not users:
        await message.answer('–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    participants_message = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n"
    for index, user in enumerate(users, start=1):
        telegram_id, username, invites_count = user
        if invites_count > 0:  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
            username_display = username if username else "–Ω–µ—Ç_userme"
            participants_message += f"{index}. ID: {telegram_id}, UsName: @{username_display}, Added: {invites_count}\n"

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            invited_users = execute_query("""
                SELECT telegram_id, username, referral_code 
                FROM users 
                WHERE inviter = ?
            """, (telegram_id,)).fetchall()

            if invited_users:
                participants_message += "   –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
                for i, invited_user in enumerate(invited_users, 1):
                    inv_telegram_id, inv_username, inv_referral_code = invited_user
                    inv_username_display = inv_username if inv_username else "–Ω–µ—Ç_userme"
                    participants_message += f"   {i}) @{inv_username_display} (ID: {inv_telegram_id})\n"
            participants_message += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–ª–∏–º–∏—Ç Telegram - 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(participants_message) > 4000:
        messages = [participants_message[i:i + 4000] for i in range(0, len(participants_message), 4000)]
        for msg in messages:
            await message.answer(msg)
    else:
        await message.answer(participants_message)


@router.message(Command('top10'))
async def show_top10(message: types.Message):
    # –ó–∞–ø—Ä–æ—Å 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    top_users = execute_query(
        "SELECT telegram_id, username, invites_count FROM users WHERE invites_count > 0 AND particip = 1 "
        "ORDER BY invites_count DESC LIMIT 10"
    ).fetchall()


    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
    if not top_users:
        await message.answer('–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    top_message = "üèÜ <b>Top 10 participants by invitation</b>:\n\n"
    medals = ["ü•á", "ü•à", "ü•â"] + ["üéñ"] * 7  # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞

    for index, user in enumerate(top_users, start=1):
        telegram_id, username, invites_count = user
        username_display = f"@{username}" if username else "unknown"
        medal = medals[index - 1] if index <= 10 else "üéñ"
        top_message += (
            f"{medal} <b>{index} spot</b>\n"
            f"üë§ <b>ID:</b> <code>{telegram_id}</code>\n"
            f"üîπ <b>Username:</b> {username_display}\n"
            f"üë• <b>Added:</b> <code>{invites_count}</code>\n\n"
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer(top_message, parse_mode="HTML")


@router.message(Command('help_adm'))
async def admin_help_command(message: types.Message):
    if not is_admin(message.from_user.username):
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    help_message = """
–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/help_adm - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
/set_winners [—á–∏—Å–ª–æ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.
/draw - –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à.
/participants - –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö.
/delete_user [user_id] - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.
/broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞. –ù–∞—á–Ω–∏ —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è

/reset_users - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    await message.answer(help_message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(Command('broadcast'))
async def broadcast_message(message: types.Message, state: FSMContext):
    if not message.from_user.username:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç username, –ø–æ—ç—Ç–æ–º—É –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not is_admin(message.from_user.username):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    if message.photo:
        photo = message.photo[-1].file_id
        await state.update_data(photo=photo)

    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:")
    await state.set_state(BroadcastState.waiting_for_broadcast_ru)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
@router.message(BroadcastState.waiting_for_broadcast_ru, F.photo)
async def save_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
@router.message(BroadcastState.waiting_for_broadcast_ru)
async def handle_broadcast_ru(message: types.Message, state: FSMContext):
    await state.update_data(broadcast_ru=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:")
    await state.set_state(BroadcastState.waiting_for_broadcast_en)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(BroadcastState.waiting_for_broadcast_en)
async def handle_broadcast_en(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text_ru = data.get("broadcast_ru")
    text_en = message.text
    photo = data.get("photo")

    users = get_all_users()
    failed_users = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    async def send_message(user_id, text):
        try:
            if photo:
                await bot.send_photo(user_id, photo=photo, caption=text)
            else:
                await bot.send_message(user_id, text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed_users.append(user_id)

    tasks = [
        send_message(user_id, text_ru if language == "ru" else text_en)
        for user_id, language in users
    ]

    await asyncio.gather(*tasks)

    if failed_users:
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {len(failed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    else:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ.")
    await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
    conn.close()